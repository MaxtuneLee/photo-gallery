name: Deploy Gallery site to Server

on:
  push:
    branches: ['main']

  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

env:
  BUILD_PATH: '.' # default value when not using subfolders

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://gallery.mxte.cc
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create .env file
        run: |
          touch .env
          echo S3_REGION=${{ secrets.S3_REGION }} >> .env
          echo S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }} >> .env
          echo S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }} >> .env
          echo S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} >> .env
          echo S3_PREFIX=${{ secrets.S3_PREFIX }} >> .env
          echo S3_ENDPOINT=${{ secrets.S3_ENDPOINT }} >> .env
          echo S3_CUSTOM_DOMAIN=${{ secrets.S3_CUSTOM_DOMAIN }} >> .env

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 -t max/maxtune-gallery --output type=docker,dest=maxtune-gallery.tar .

      - name: Extract image
        run: |
          [ -d maxtune-gallery ] || mkdir maxtune-gallery
          tar -xf maxtune-gallery.tar -C maxtune-gallery

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: maxtune-gallery
          path: ./maxtune-gallery

  Deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: https://gallery.mxte.cc
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: maxtune-gallery
          path: ./maxtune-gallery

      - name: Copy Docker image to server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
          REMOTE_PORT: ${{ secrets.SERVER_PORT }}
          ARGS: '-ravc -i --delete'
          SOURCE: './maxtune-gallery/'
          REMOTE_HOST: ${{ secrets.SERVER_ADDRESS }}
          REMOTE_USER: ${{ secrets.SERVER_USERNAME }}
          TARGET: /tmp/maxtune-gallery
          SCRIPT_BEFORE: |
            [ -d /tmp/maxtune-gallery ] || mkdir /tmp/maxtune-gallery
          SCRIPT_AFTER: |
            cd /tmp/maxtune-gallery
            tar -cf maxtune-gallery.tar *
            ### Notice: run for develop ###
            # Stop and remove existing container if it exists
            if [ "$(docker ps -aq -f name=maxtune-gallery)" ]; then
              docker stop maxtune-gallery
              docker rm maxtune-gallery
            fi
            # Remove existing image if it exists
            if [ "$(docker images -q max/maxtune-gallery)" ]; then
              docker rmi max/maxtune-gallery
            fi
            docker load -i maxtune-gallery.tar
            docker run --restart always -d --name maxtune-gallery -p 8081:8081 max/maxtune-gallery
